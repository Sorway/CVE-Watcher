package fr.sorway.cvewatcher.managers;

import com.apptasticsoftware.rssreader.Item;
import fr.sorway.cvewatcher.CVEWatcher;
import fr.sorway.cvewatcher.data.Vulnerability;
import fr.sorway.cvewatcher.database.DatabaseManager;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityManager {
    private final DatabaseManager databaseManager;

    public VulnerabilityManager(CVEWatcher cveWatcher) {
        this.databaseManager = cveWatcher.getDatabaseManager();
    }

    public void registerVulnerability(Vulnerability vulnerability) {
        try {
            PreparedStatement statement = databaseManager.getConnection().prepareStatement("INSERT INTO Vulnerabilities (title, type, link, pubDate, guid, description) VALUES (?, ?, ?, ?, ?, ?);");
            statement.setString(1, vulnerability.title());
            statement.setString(2, vulnerability.type().name());
            statement.setString(3, vulnerability.link());
            statement.setString(4, vulnerability.pubDate());
            statement.setString(5, vulnerability.guid());
            statement.setString(6, vulnerability.description());
            statement.executeUpdate();
            statement.getConnection().close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public boolean checkVulnerability(Vulnerability vulnerability) {
        try {
            PreparedStatement statement = databaseManager.getConnection().prepareStatement("SELECT * FROM Vulnerabilities WHERE title=? AND type=? AND link=? AND pubDate=? AND guid=? AND description=?;");
            statement.setString(1, vulnerability.title());
            statement.setString(2, vulnerability.type().name());
            statement.setString(3, vulnerability.link());
            statement.setString(4, vulnerability.pubDate());
            statement.setString(5, vulnerability.guid());
            statement.setString(6, vulnerability.description());

            boolean result = statement.executeQuery().next();
            statement.getConnection().close();
            return result;
        } catch (SQLException e) {
            return false;
        }
    }

    public List<Vulnerability> convertVulnerability(Vulnerability.Type type, List<Item> items) {
        return items.stream()
                .map(item -> new Vulnerability(
                        item.getTitle().get(),
                        type,
                        item.getLink().get(),
                        item.getPubDate().get(),
                        item.getGuid().get(),
                        item.getDescription().get().replaceAll("\\<.*?\\>", "")
                ))
                .collect(Collectors.toList());
    }
}
