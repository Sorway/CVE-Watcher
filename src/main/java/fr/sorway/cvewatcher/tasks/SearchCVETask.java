package fr.sorway.cvewatcher.tasks;

import com.apptasticsoftware.rssreader.RssReader;
import fr.sorway.cvewatcher.CVEWatcher;
import fr.sorway.cvewatcher.data.CVEVulnerability;
import fr.sorway.cvewatcher.data.Vulnerability;
import fr.sorway.cvewatcher.data.VulnerabilityType;
import fr.sorway.cvewatcher.managers.VulnerabilityManager;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.channel.concrete.NewsChannel;
import org.json.JSONArray;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

public class SearchCVETask implements Runnable {
    private final Logger logger = LoggerFactory.getLogger(SearchCVETask.class);
    private final CVEWatcher cveWatcher;
    private final VulnerabilityManager vulnerabilityManager;

    public SearchCVETask(CVEWatcher cveWatcher) {
        this.cveWatcher = cveWatcher;
        this.vulnerabilityManager = new VulnerabilityManager(cveWatcher);
    }

    @Override
    public void run() {
        try {
            List<Vulnerability> vulnerabilities = new ArrayList<>();

            logger.info("Finding ANSSI vulnerabilities.");
            RssReader rssReader = new RssReader();
            rssReader.addHeader("Cache-Control", "no-cache, no-store, must-revalidate");
            rssReader.addHeader("Pragma", "no-cache");

            List<String> rssUrls = List.of(
                    "https://www.cert.ssi.gouv.fr/feed/",
                    "https://www.cert.ssi.gouv.fr/alerte/feed/"
            );

            for (String rssUrl : rssUrls) {
                vulnerabilities.addAll(vulnerabilityManager.convertANSSIVulnerabilities(
                        rssUrl.contains("alerte") ? VulnerabilityType.ALERT : VulnerabilityType.VULNERABILITY,
                        rssReader.read(rssUrl).toList()
                ));
            }

            logger.info("Finding CVE vulnerabilities.");
            URL url = new URL("https://cve.circl.lu/api/last/2");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Accept", "application/json");

            if (connection.getResponseCode() == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                StringBuilder content = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    content.append(inputLine);
                }

                in.close();
                JSONArray data = new JSONArray(content.toString());
                vulnerabilities.addAll(vulnerabilityManager.convertCVEVulnerabilities(data));
            }
            connection.disconnect();

            logger.info("{} Vulnerabilities fund.", vulnerabilities.size());
            for (Vulnerability vulnerability : vulnerabilities) {
                if (!vulnerabilityManager.checkVulnerability(vulnerability)) {
                    vulnerabilityManager.registerVulnerability(vulnerability);
                    sendMessage(vulnerability);
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void sendMessage(Vulnerability vulnerability) {
        String guildId = cveWatcher.getConfiguration().getString("announcement_guild");
        String channelId = cveWatcher.getConfiguration().getString("announcement_channel");

        if (guildId == null || channelId == null)
            return;

        Guild guild = cveWatcher.getDiscordAPIManager().getShardManager().getGuildById(guildId);
        NewsChannel channel = guild == null ? null : guild.getNewsChannelById(channelId);

        if (channel != null) {
            EmbedBuilder embed = new EmbedBuilder()
                    .setColor(vulnerability.type().getColor())
                    .setTimestamp(Instant.now())
                    .setFooter("Développé par Soso' | Source: " + vulnerability.source().getDisplayName())
                    .setThumbnail(vulnerability.source().getIconUrl())
                    .setAuthor(vulnerability.title().replace("[SCADA]", ""), vulnerability.links(), null)
                    .setDescription(vulnerability.description())
                    .addField("Date de publication:", vulnerability.publishedDate(), true)
                    .addField("Type:", vulnerability.type().getDisplayName(), true);

            if (vulnerability instanceof CVEVulnerability cveVulnerability) {
                if (cveVulnerability.getCVSS() != null)
                    embed.addField("CVSS", cveVulnerability.getCVSS(), true);
                embed.addField("CWE", cveVulnerability.getCWE(), true);
            }

            channel.sendMessageEmbeds(embed.build()).queue(message -> message.crosspost().queue());
        }
    }
}
